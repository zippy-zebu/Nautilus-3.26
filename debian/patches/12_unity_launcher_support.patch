From: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
Date: Thu, 12 Apr 2018 23:54:13 +0200
Subject: _unity_launcher_support

---
 config.h.meson                |   1 +
 meson.build                   |   8 +++
 meson_options.txt             |   4 ++
 src/meson.build               |  10 +++
 src/nautilus-application.c    |   8 +++
 src/nautilus-toolbar.c        |  21 ++++++
 src/unity-bookmarks-handler.c | 147 ++++++++++++++++++++++++++++++++++++++
 src/unity-bookmarks-handler.h |  31 ++++++++
 src/unity-quicklist-handler.c | 161 ++++++++++++++++++++++++++++++++++++++++++
 src/unity-quicklist-handler.h |  72 +++++++++++++++++++
 10 files changed, 463 insertions(+)
 create mode 100644 src/unity-bookmarks-handler.c
 create mode 100644 src/unity-bookmarks-handler.h
 create mode 100644 src/unity-quicklist-handler.c
 create mode 100644 src/unity-quicklist-handler.h

diff --git a/config.h.meson b/config.h.meson
index 4f5cb58..9ddb88d 100644
--- a/config.h.meson
+++ b/config.h.meson
@@ -4,6 +4,7 @@
 #mesondefine HAVE_EXEMPI
 #mesondefine HAVE_EXIF
 #mesondefine HAVE_SELINUX
+#mesondefine HAVE_UNITY
 #mesondefine ENABLE_DESKTOP
 #mesondefine ENABLE_PACKAGEKIT
 #mesondefine LOCALEDIR
diff --git a/meson.build b/meson.build
index 0b8a6f1..4d2acf2 100644
--- a/meson.build
+++ b/meson.build
@@ -30,6 +30,8 @@ exempi_ver = '>=2.1.0'
 notify_ver = '0.7.0'
 schemas_ver = '>=3.8.0'
 autoar_ver = '>=0.2.1'
+unity_ver = '>=4.0.0'
+dbusmenu_ver = '>=0.4.90'
 selinux_ver = '>=2.0'
 
 cc = meson.get_compiler ('c')
@@ -81,6 +83,12 @@ if get_option ('enable-selinux')
     conf.set10 ('HAVE_SELINUX', true)
 endif
 
+if get_option ('enable-unity')
+    unity = dependency ('unity', version: unity_ver)
+    dbusmenu = dependency ('dbusmenu-glib-0.4', version: dbusmenu_ver)
+    conf.set10 ('HAVE_UNITY', true)
+endif
+
 tracker_sparql = dependency ('tracker-sparql-2.0', required: false)
 if not tracker_sparql.found()
     tracker_sparql = dependency ('tracker-sparql-1.0')
diff --git a/meson_options.txt b/meson_options.txt
index c934dd8..2e4d0af 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -15,6 +15,10 @@ option ('enable-xmp',
 option ('enable-selinux',
         type: 'boolean',
         value: true)
+option ('enable-unity',
+        type: 'boolean',
+        value: false,
+        description: 'build with unity launcher support')
 option ('enable-desktop',
         type: 'boolean',
         value: true)
diff --git a/src/meson.build b/src/meson.build
index cc08345..59703df 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -285,6 +285,16 @@ if get_option ('enable-selinux')
     nautilus_deps += selinux
 endif
 
+if get_option ('enable-unity')
+    nautilus_deps += [unity, dbusmenu]
+    libnautilus_sources += [
+        'unity-quicklist-handler.c',
+        'unity-quicklist-handler.h',
+        'unity-bookmarks-handler.c',
+        'unity-bookmarks-handler.h'
+    ]
+endif
+
 if get_option ('enable-xmp')
     nautilus_deps += exempi
 endif
diff --git a/src/nautilus-application.c b/src/nautilus-application.c
index 3ccbf54..b62cfab 100644
--- a/src/nautilus-application.c
+++ b/src/nautilus-application.c
@@ -54,6 +54,10 @@
 #define DEBUG_FLAG NAUTILUS_DEBUG_APPLICATION
 #include "nautilus-debug.h"
 
+#ifdef HAVE_UNITY
+#include "src/unity-bookmarks-handler.h"
+#endif
+
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -1301,6 +1305,10 @@ nautilus_application_startup (GApplication *app)
     nautilus_application_startup_common (self);
 
     nautilus_profile_end (NULL);
+
+#ifdef HAVE_UNITY
+    unity_bookmarks_handler_initialize ();
+#endif
 }
 
 static gboolean
diff --git a/src/nautilus-toolbar.c b/src/nautilus-toolbar.c
index a6d01b8..2b47275 100644
--- a/src/nautilus-toolbar.c
+++ b/src/nautilus-toolbar.c
@@ -40,6 +40,10 @@
 #include "animation/ide-box-theatric.h"
 #include "animation/egg-animation.h"
 
+#ifdef HAVE_UNITY
+#include <unity.h>
+#endif
+
 #include <glib/gi18n.h>
 #include <math.h>
 
@@ -100,6 +104,9 @@ struct _NautilusToolbar
     NautilusWindowSlot *active_slot;
     GBinding *icon_binding;
     GBinding *view_widget_binding;
+#if HAVE_UNITY
+    UnityLauncherEntry *ulauncher;
+#endif
 };
 
 enum
@@ -389,6 +396,9 @@ on_remove_finished_operations_timeout (NautilusToolbar *self)
     {
         gtk_revealer_set_reveal_child (GTK_REVEALER (self->operations_revealer),
                                        FALSE);
+#ifdef HAVE_UNITY
+        unity_launcher_entry_set_progress_visible (self->ulauncher, FALSE);
+#endif
     }
     else
     {
@@ -575,6 +585,10 @@ update_operations (NautilusToolbar *self)
                                        TRUE);
         gtk_widget_queue_draw (self->operations_icon);
 
+#ifdef HAVE_UNITY
+        unity_launcher_entry_set_progress_visible (self->ulauncher, TRUE);
+#endif
+
         /* Show the popover at start to increase visibility.
          * Check whether the toolbar is visible or not before showing the
          * popover. This can happens if the window has the disables-chrome
@@ -742,6 +756,10 @@ on_operations_icon_draw (GtkWidget       *widget,
     }
 
 
+#ifdef HAVE_UNITY
+    unity_launcher_entry_set_progress (self->ulauncher, ratio);
+#endif
+
     width = gtk_widget_get_allocated_width (widget);
     height = gtk_widget_get_allocated_height (widget);
 
@@ -943,6 +961,9 @@ nautilus_toolbar_init (NautilusToolbar *self)
                        self->location_entry);
 
     self->progress_manager = nautilus_progress_info_manager_dup_singleton ();
+#ifdef HAVE_UNITY
+    self->ulauncher = unity_launcher_entry_get_for_desktop_id ("org.gnome.Nautilus.desktop");
+#endif
     g_signal_connect (self->progress_manager, "new-progress-info",
                       G_CALLBACK (on_new_progress_info), self);
     g_signal_connect (self->progress_manager, "has-viewers-changed",
diff --git a/src/unity-bookmarks-handler.c b/src/unity-bookmarks-handler.c
new file mode 100644
index 0000000..5c1a234
--- /dev/null
+++ b/src/unity-bookmarks-handler.c
@@ -0,0 +1,147 @@
+/*unity-bookmarks-handler.c: handle Unity bookmark for quicklist
+ *
+ * Copyright (C) 2012 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ *
+ * Authors: Didier Roche <didrocks@ubuntu.com>
+ *
+ */
+
+#include <config.h>
+
+#include "unity-bookmarks-handler.h"
+
+#include <libdbusmenu-glib/dbusmenu-glib.h>
+#include "unity-quicklist-handler.h"
+
+#include "nautilus-application.h"
+
+#include <eel/eel-string.h>
+#include <gdk/gdkx.h>
+
+static UnityQuicklistHandler* unity_quicklist_handler = NULL;
+static NautilusBookmarkList* bookmarks = NULL;
+
+static void
+activate_bookmark_by_quicklist (DbusmenuMenuitem *menu,
+                                guint timestamp,
+                                NautilusBookmark *bookmark)
+{
+    g_return_if_fail (NAUTILUS_IS_BOOKMARK (bookmark));
+
+    GFile *locations[2];
+    GList *l;
+    NautilusApplication *application;
+
+    locations[0] = nautilus_bookmark_get_location (bookmark);
+    locations[1] = NULL;
+
+    application = NAUTILUS_APPLICATION (g_application_get_default ());
+
+    /* Make sure that the application timestamp matches the event */
+    for (l = gtk_application_get_windows (GTK_APPLICATION (application)); l; l = l->next)
+    {
+        GdkWindow *gdk_window = gtk_widget_get_window (GTK_WIDGET (l->data));
+        gdk_x11_window_set_user_time (gdk_window, timestamp);
+    }
+
+    g_application_open (G_APPLICATION (application), locations, 1, "");
+
+    g_object_unref (locations[0]);
+}
+
+static void
+unity_bookmarks_handler_remove_bookmark_quicklists () {
+
+    GList *children, *l;
+
+    /* remove unity quicklist bookmarks to launcher entries */
+    for (l = unity_quicklist_get_launcher_entries (unity_quicklist_handler); l; l = l->next)
+    {
+        UnityLauncherEntry *entry = l->data;
+        DbusmenuMenuitem *ql = unity_launcher_entry_get_quicklist (entry);
+        if (!ql)
+        {
+            break;
+        }
+
+        children = dbusmenu_menuitem_get_children (ql);
+        while (children)
+        {
+            DbusmenuMenuitem *child = children->data;
+            children = children->next;
+            if (unity_quicklist_handler_menuitem_is_bookmark_item (child))
+            {
+                g_signal_handlers_disconnect_matched (child, G_SIGNAL_MATCH_FUNC, 0, 0, 0,
+                                                      (GCallback) activate_bookmark_by_quicklist, 0);
+                dbusmenu_menuitem_child_delete (ql, child);
+                g_object_unref(child);
+            }
+        }
+    }
+}
+
+static void
+unity_bookmarks_handler_update_bookmarks () {
+
+    NautilusBookmark *bookmark;
+    GList *all_bookmarks;
+    GList *lb;
+    GList *l;
+
+    /* append new set of bookmarks */
+    all_bookmarks = nautilus_bookmark_list_get_all (bookmarks);
+    for (lb = all_bookmarks; lb != NULL; lb = lb->next)
+    {
+        bookmark = NAUTILUS_BOOKMARK (lb->data);
+
+        for (l = unity_quicklist_get_launcher_entries (unity_quicklist_handler); l; l = l->next)
+        {
+            UnityLauncherEntry *entry = l->data;
+
+            DbusmenuMenuitem* menuitem = dbusmenu_menuitem_new();
+            gchar *bookmark_name_dbusmenu = eel_str_replace_substring (nautilus_bookmark_get_name (bookmark), "_", "__");
+            dbusmenu_menuitem_property_set (menuitem, "label", bookmark_name_dbusmenu);
+            g_free (bookmark_name_dbusmenu);
+            g_signal_connect (menuitem, DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
+                              (GCallback) activate_bookmark_by_quicklist,
+                              bookmark);
+
+            unity_quicklist_handler_append_menuitem (entry, menuitem);
+        }
+    }
+}
+
+static void
+unity_bookmarks_handler_refresh_bookmarks ()
+{
+    unity_bookmarks_handler_remove_bookmark_quicklists ();
+    unity_bookmarks_handler_update_bookmarks ();
+}
+
+void
+unity_bookmarks_handler_initialize ()
+{
+    unity_quicklist_handler = unity_quicklist_handler_get_singleton ();
+    /* get the singleton */
+    bookmarks = nautilus_bookmark_list_new ();
+    unity_bookmarks_handler_refresh_bookmarks ();
+
+    /* Recreate dynamic part of menu if bookmark list changes */
+    g_signal_connect (bookmarks, "changed",
+                      G_CALLBACK (unity_bookmarks_handler_refresh_bookmarks), 0);
+}
diff --git a/src/unity-bookmarks-handler.h b/src/unity-bookmarks-handler.h
new file mode 100644
index 0000000..a887648
--- /dev/null
+++ b/src/unity-bookmarks-handler.h
@@ -0,0 +1,31 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*- */
+/*
+ * unity-bookmarks-handler.h: handle Unity bookmark for quicklist
+ *
+ * Copyright (C) 2012 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ *
+ * Authors: Didier Roche <didrocks@ubuntu.com>
+ *
+ */
+
+#ifndef __UNITY_BOOKMARKS_HANDLER_H__
+#define __UNITY_BOOKMARKS_HANDLER_H__
+
+void unity_bookmarks_handler_initialize (void);
+
+#endif /* __UNITY_BOOKMARKS_HANDLER_H__*/
diff --git a/src/unity-quicklist-handler.c b/src/unity-quicklist-handler.c
new file mode 100644
index 0000000..3133ecb
--- /dev/null
+++ b/src/unity-quicklist-handler.c
@@ -0,0 +1,161 @@
+/*unity-quicklist-handler.c: handle Unity quicklists
+ *
+ * Copyright (C) 2012 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ *
+ * Authors: Didier Roche <didrocks@ubuntu.com>
+ *
+ */
+
+#include <config.h>
+
+#include "unity-quicklist-handler.h"
+
+struct _UnityQuicklistHandlerPriv {
+    GList *launcher_entries;
+};
+
+G_DEFINE_TYPE (UnityQuicklistHandler, unity_quicklist_handler, G_TYPE_OBJECT);
+
+static UnityQuicklistHandler *unity_quicklist_handler_singleton = NULL;
+
+GList *
+unity_quicklist_get_launcher_entries (UnityQuicklistHandler *self)
+{
+    return self->priv->launcher_entries;
+}
+
+gboolean
+unity_quicklist_handler_menuitem_is_progress_item (DbusmenuMenuitem *ql)
+{
+    g_return_val_if_fail(ql, FALSE);
+    return dbusmenu_menuitem_property_get_bool (ql, UNITY_QUICKLIST_PROGRESS_ITEM);
+}
+
+gboolean
+unity_quicklist_handler_menuitem_is_bookmark_item (DbusmenuMenuitem *ql)
+{
+    g_return_val_if_fail(ql, FALSE);
+    return (!unity_quicklist_handler_menuitem_is_progress_item(ql));
+}
+
+void
+unity_quicklist_handler_append_menuitem (UnityLauncherEntry *entry, DbusmenuMenuitem *elem)
+{
+    g_return_if_fail (entry);
+
+    GList *children, *l;
+    int position = 0;
+    DbusmenuMenuitem *ql = unity_launcher_entry_get_quicklist (entry);
+
+    gboolean is_bookmark = unity_quicklist_handler_menuitem_is_bookmark_item (elem);
+    gboolean is_progress = unity_quicklist_handler_menuitem_is_progress_item (elem);
+
+    if (!ql)
+    {
+        ql = dbusmenu_menuitem_new ();
+        unity_launcher_entry_set_quicklist (entry, ql);
+    }
+
+    children = dbusmenu_menuitem_get_children (ql);
+    for (l = children; l; l = l->next)
+    {
+        DbusmenuMenuitem *child = l->data;
+        /* set quicklist groups together, and bookmarks group after progress group.
+           bookmarks elements are ordered alphabetically */
+        if ((is_bookmark && unity_quicklist_handler_menuitem_is_bookmark_item (child) &&
+                (g_strcmp0 (dbusmenu_menuitem_property_get (child, DBUSMENU_MENUITEM_PROP_LABEL), dbusmenu_menuitem_property_get (elem, DBUSMENU_MENUITEM_PROP_LABEL)) < 0)) ||
+            (is_progress && unity_quicklist_handler_menuitem_is_progress_item (child)) ||
+            (is_progress && unity_quicklist_handler_menuitem_is_bookmark_item (child)))
+        {
+            position++;
+        }
+        else
+        {
+            break;
+        }
+    }
+
+    dbusmenu_menuitem_child_add_position (ql, elem, position);
+}
+
+static void
+unity_quicklist_handler_dispose (GObject *obj)
+{
+    UnityQuicklistHandler *self = UNITY_QUICKLIST_HANDLER (obj);
+
+    if (self->priv->launcher_entries)
+    {
+        g_list_free_full (self->priv->launcher_entries, g_object_unref);
+        self->priv->launcher_entries = NULL;
+    }
+
+    G_OBJECT_CLASS (unity_quicklist_handler_parent_class)->dispose (obj);
+}
+
+static void
+unity_quicklist_handler_launcher_entry_add (UnityQuicklistHandler *self,
+                                            const gchar *entry_id)
+{
+    GList **entries;
+    UnityLauncherEntry *entry;
+
+    entries = &(self->priv->launcher_entries);
+    entry = unity_launcher_entry_get_for_desktop_id (entry_id);
+
+    if (entry)
+    {
+        *entries = g_list_prepend (*entries, entry);
+    }
+}
+
+static void
+unity_quicklist_handler_init (UnityQuicklistHandler *self)
+{
+    self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self, UNITY_TYPE_QUICKLIST_HANDLER,
+                                              UnityQuicklistHandlerPriv);
+
+    unity_quicklist_handler_launcher_entry_add (self, "org.gnome.Nautilus.desktop");
+    g_return_if_fail (g_list_length (self->priv->launcher_entries) != 0);
+}
+
+static void
+unity_quicklist_handler_class_init (UnityQuicklistHandlerClass *klass)
+{
+    GObjectClass *oclass;
+
+    oclass = G_OBJECT_CLASS (klass);
+    oclass->dispose = unity_quicklist_handler_dispose;
+
+    g_type_class_add_private (klass, sizeof (UnityQuicklistHandlerPriv));
+}
+
+UnityQuicklistHandler *
+unity_quicklist_handler_get_singleton (void)
+{
+    if (!unity_quicklist_handler_singleton)
+    {
+        unity_quicklist_handler_singleton = unity_quicklist_handler_new ();
+    }
+    return unity_quicklist_handler_singleton;
+}
+
+UnityQuicklistHandler *
+unity_quicklist_handler_new (void)
+{
+    return g_object_new (UNITY_TYPE_QUICKLIST_HANDLER, NULL);
+}
diff --git a/src/unity-quicklist-handler.h b/src/unity-quicklist-handler.h
new file mode 100644
index 0000000..8ffbb06
--- /dev/null
+++ b/src/unity-quicklist-handler.h
@@ -0,0 +1,72 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 8; tab-width: 8 -*- */
+/*
+ * unity-quicklist.h: handle unity quicklists.
+ *
+ * Copyright (C) 2012 Canonical
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA 02111-1307, USA.
+ *
+ * Authors: Didier Roche <didrocks@ubuntu.com>
+ *
+ */
+
+#ifndef __UNITY_QUICKLIST_HANDLER_H__
+#define __UNITY_QUICKLIST_HANDLER_H__
+
+#include <glib-object.h>
+#include <glib/gi18n.h>
+
+#include <libdbusmenu-glib/dbusmenu-glib.h>
+#include <unity.h>
+
+#define UNITY_TYPE_QUICKLIST_HANDLER unity_quicklist_handler_get_type()
+#define UNITY_QUICKLIST_HANDLER(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TYPE_QUICKLIST_HANDLER, UnityQuicklistHandler))
+#define UNITY_QUICKLIST_HANDLER_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TYPE_QUICKLIST_HANDLER, UnityQuicklistHandlerClass))
+#define UNITY_IS_QUICKLIST_HANDLER(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TYPE_QUICKLIST_HANDLER))
+#define UNITY_IS_QUICKLIST_HANDLER_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TYPE_QUICKLIST_HANDLER))
+#define UNITY_QUICKLIST_HANDLER_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TYPE_QUICKLIST_HANDLER, UnityQuicklistHandlerClass))
+
+typedef struct _UnityQuicklistHandlerPriv UnityQuicklistHandlerPriv;
+
+#define UNITY_QUICKLIST_PROGRESS_ITEM "unity-quicklist-progress-item"
+
+typedef struct {
+  GObject parent;
+
+  /* private */
+  UnityQuicklistHandlerPriv *priv;
+} UnityQuicklistHandler;
+
+typedef struct {
+  GObjectClass parent_class;
+} UnityQuicklistHandlerClass;
+
+GType unity_quicklist_handler_get_type (void);
+
+UnityQuicklistHandler * unity_quicklist_handler_new (void);
+UnityQuicklistHandler * unity_quicklist_handler_get_singleton (void);
+
+GList * unity_quicklist_get_launcher_entries (UnityQuicklistHandler *unity_quicklist_handler);
+gboolean unity_quicklist_handler_menuitem_is_progress_item (DbusmenuMenuitem *ql);
+gboolean unity_quicklist_handler_menuitem_is_bookmark_item (DbusmenuMenuitem *ql);
+void unity_quicklist_handler_append_menuitem (UnityLauncherEntry *entry, DbusmenuMenuitem *elem);
+
+#endif /* __UNITY_QUICKLIST_HANDLER_H__ */
